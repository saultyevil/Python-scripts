#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import numpy as np
from matplotlib import pyplot as plt


def plot_weight_tau():
    """
    Plot the possible photon weight change as a function of tau_scat.
    """

    def new_weight(tau, alpha):
        """
        Return the value by which the original weight is modified by.
        """

        return np.exp(tau * (alpha - 1)) / alpha

    def path_alpha(tau_path):
        """
        Return the value of alpha for a given tau_path.
        """

        return 1 / (1 + tau_path)

    min_tau = 0.1
    max_tau = 10
    ntau = int(1e4)
    tau = np.linspace(min_tau, max_tau, ntau)

    ntau_path = 10
    min_tau_path = 0
    max_tau_path = max_tau
    tau_path = np.linspace(min_tau_path, max_tau_path, ntau_path)

    weight_factors = np.zeros((ntau_path, ntau))
    for i in range(ntau_path):
        alpha = path_alpha(tau_path[i])
        weight_factors[i, :] = new_weight(tau, alpha)

    plt.figure(figsize=(12, 8))
    for i in range(ntau_path):
        plt.semilogy(tau, weight_factors[i, :], label=r"$\tau_{path}$ = " + "{:.2f}".format(tau_path[i]))

    plt.legend()
    # plt.xlim(min_tau, max_tau)
    plt.xlabel(r"$\tau_{scat}$")
    plt.ylabel(r"$W(\tau_{scat})$")
    plt.savefig("path_stretching_weight.png")
    plt.show()

    return


def plot_weight_file(path_stretch_on):
    """
    Plot the photon weights from a file generated by path_stretching.py

    path_stretch_on      bool
                         open the pas file instead of true
    """

    fname = "photon_statistics"
    if path_stretch_on:
        fname += "_pas"
    fname += ".txt"
    with open(fname, "r") as f:
        data = []
        header = f.readline().split()
        for line in f:
            l = line.split()
            data.append(l)
    data = np.array(data, dtype=float)

    nbins = 20
    nplots = data.shape[1]
    fig, ax = plt.subplots(nplots, 1, figsize=(5, 12))
    for i in range(nplots):
        weights = np.ones_like(data[:, i])/float(len(data[:, i]))
        ax[i].hist(data[:, i], nbins,  weights=weights, log=True)
        ax[i].set_xlabel("{}".format(header[i]))
        ax[i].set_ylabel("Count")

    fig.tight_layout()
    plt.show()

    return


if __name__ == "__main__":
    # plot_weight_file(True)
    plot_weight_tau()
